/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.quotation.api.GetSnapshotRequest');
goog.provide('proto.quotation.api.GetSnapshotResponse');
goog.provide('proto.quotation.api.Snapshot');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.quotation.api.ContractKey');
goog.require('proto.quotation.api.Result');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotation.api.GetSnapshotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quotation.api.GetSnapshotRequest.repeatedFields_, null);
};
goog.inherits(proto.quotation.api.GetSnapshotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotation.api.GetSnapshotRequest.displayName = 'proto.quotation.api.GetSnapshotRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quotation.api.GetSnapshotRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotation.api.GetSnapshotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quotation.api.GetSnapshotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotation.api.GetSnapshotRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.quotation.api.GetSnapshotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    listcontractList: jspb.Message.toObjectList(msg.getListcontractList(),
    proto.quotation.api.ContractKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotation.api.GetSnapshotRequest}
 */
proto.quotation.api.GetSnapshotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotation.api.GetSnapshotRequest;
  return proto.quotation.api.GetSnapshotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotation.api.GetSnapshotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotation.api.GetSnapshotRequest}
 */
proto.quotation.api.GetSnapshotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quotation.api.ContractKey;
      reader.readMessage(value,proto.quotation.api.ContractKey.deserializeBinaryFromReader);
      msg.addListcontract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotation.api.GetSnapshotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotation.api.GetSnapshotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotation.api.GetSnapshotRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.quotation.api.GetSnapshotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListcontractList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.quotation.api.ContractKey.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ContractKey listContract = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.quotation.api.ContractKey>}
 */
proto.quotation.api.GetSnapshotRequest.prototype.getListcontractList = function() {
  return /** @type{!Array.<!proto.quotation.api.ContractKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quotation.api.ContractKey, 1));
};


/** @param {!Array.<!proto.quotation.api.ContractKey>} value */
proto.quotation.api.GetSnapshotRequest.prototype.setListcontractList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.quotation.api.ContractKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quotation.api.ContractKey}
 */
proto.quotation.api.GetSnapshotRequest.prototype.addListcontract = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.quotation.api.ContractKey, opt_index);
};


proto.quotation.api.GetSnapshotRequest.prototype.clearListcontractList = function() {
  this.setListcontractList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotation.api.Snapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quotation.api.Snapshot.repeatedFields_, null);
};
goog.inherits(proto.quotation.api.Snapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotation.api.Snapshot.displayName = 'proto.quotation.api.Snapshot';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quotation.api.Snapshot.repeatedFields_ = [18,19,20,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotation.api.Snapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.quotation.api.Snapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotation.api.Snapshot} msg The msg instance to transform.
 * @return {!Object}
 */
proto.quotation.api.Snapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.quotation.api.Result.toObject(includeInstance, f),
    exchangeno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commodityno: jspb.Message.getFieldWithDefault(msg, 3, ""),
    commoditytype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contractno: jspb.Message.getFieldWithDefault(msg, 5, ""),
    open: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    last: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    high: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    low: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    preclose: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    presettle: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    uplimit: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    downlimit: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    volume: jspb.Message.getFieldWithDefault(msg, 14, 0),
    turnover: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    lastvolume: jspb.Message.getFieldWithDefault(msg, 16, 0),
    openinterest: jspb.Message.getFieldWithDefault(msg, 17, 0),
    bidpriceList: jspb.Message.getRepeatedFloatingPointField(msg, 18),
    bidvolumeList: jspb.Message.getField(msg, 19),
    askpriceList: jspb.Message.getRepeatedFloatingPointField(msg, 20),
    askvolumeList: jspb.Message.getField(msg, 21),
    timestamp: jspb.Message.getFieldWithDefault(msg, 22, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotation.api.Snapshot}
 */
proto.quotation.api.Snapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotation.api.Snapshot;
  return proto.quotation.api.Snapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotation.api.Snapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotation.api.Snapshot}
 */
proto.quotation.api.Snapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quotation.api.Result;
      reader.readMessage(value,proto.quotation.api.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangeno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommodityno(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommoditytype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractno(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpen(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLast(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHigh(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLow(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreclose(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPresettle(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUplimit(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDownlimit(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setVolume(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTurnover(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setLastvolume(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpeninterest(value);
      break;
    case 18:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setBidpriceList(value);
      break;
    case 19:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFixed64());
      msg.setBidvolumeList(value);
      break;
    case 20:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setAskpriceList(value);
      break;
    case 21:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFixed64());
      msg.setAskvolumeList(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotation.api.Snapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotation.api.Snapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotation.api.Snapshot} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.quotation.api.Snapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.quotation.api.Result.serializeBinaryToWriter
    );
  }
  f = message.getExchangeno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommodityno();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCommoditytype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContractno();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOpen();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getLast();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getLow();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getPreclose();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getPresettle();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getUplimit();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getDownlimit();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeFixed64(
      14,
      f
    );
  }
  f = message.getTurnover();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getLastvolume();
  if (f !== 0) {
    writer.writeFixed64(
      16,
      f
    );
  }
  f = message.getOpeninterest();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getBidpriceList();
  if (f.length > 0) {
    writer.writePackedDouble(
      18,
      f
    );
  }
  f = message.getBidvolumeList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      19,
      f
    );
  }
  f = message.getAskpriceList();
  if (f.length > 0) {
    writer.writePackedDouble(
      20,
      f
    );
  }
  f = message.getAskvolumeList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      21,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
};


/**
 * optional Result result = 1;
 * @return {?proto.quotation.api.Result}
 */
proto.quotation.api.Snapshot.prototype.getResult = function() {
  return /** @type{?proto.quotation.api.Result} */ (
    jspb.Message.getWrapperField(this, proto.quotation.api.Result, 1));
};


/** @param {?proto.quotation.api.Result|undefined} value */
proto.quotation.api.Snapshot.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.quotation.api.Snapshot.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.quotation.api.Snapshot.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string exchangeNo = 2;
 * @return {string}
 */
proto.quotation.api.Snapshot.prototype.getExchangeno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.quotation.api.Snapshot.prototype.setExchangeno = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string commodityNo = 3;
 * @return {string}
 */
proto.quotation.api.Snapshot.prototype.getCommodityno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.quotation.api.Snapshot.prototype.setCommodityno = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string commodityType = 4;
 * @return {string}
 */
proto.quotation.api.Snapshot.prototype.getCommoditytype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.quotation.api.Snapshot.prototype.setCommoditytype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string contractNo = 5;
 * @return {string}
 */
proto.quotation.api.Snapshot.prototype.getContractno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.quotation.api.Snapshot.prototype.setContractno = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double open = 6;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getOpen = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setOpen = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional double last = 7;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getLast = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setLast = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional double high = 8;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getHigh = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setHigh = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional double low = 9;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getLow = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setLow = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional double preClose = 10;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getPreclose = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setPreclose = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional double preSettle = 11;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getPresettle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setPresettle = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional double upLimit = 12;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getUplimit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setUplimit = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional double downLimit = 13;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getDownlimit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setDownlimit = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional fixed64 volume = 14;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional double turnover = 15;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getTurnover = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setTurnover = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional fixed64 lastVolume = 16;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getLastvolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setLastvolume = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional int64 openInterest = 17;
 * @return {number}
 */
proto.quotation.api.Snapshot.prototype.getOpeninterest = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.quotation.api.Snapshot.prototype.setOpeninterest = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * repeated double bidPrice = 18;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.quotation.api.Snapshot.prototype.getBidpriceList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 18));
};


/** @param {!Array.<number>} value */
proto.quotation.api.Snapshot.prototype.setBidpriceList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.quotation.api.Snapshot.prototype.addBidprice = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


proto.quotation.api.Snapshot.prototype.clearBidpriceList = function() {
  this.setBidpriceList([]);
};


/**
 * repeated fixed64 bidVolume = 19;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.quotation.api.Snapshot.prototype.getBidvolumeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 19));
};


/** @param {!Array.<number>} value */
proto.quotation.api.Snapshot.prototype.setBidvolumeList = function(value) {
  jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.quotation.api.Snapshot.prototype.addBidvolume = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


proto.quotation.api.Snapshot.prototype.clearBidvolumeList = function() {
  this.setBidvolumeList([]);
};


/**
 * repeated double askPrice = 20;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.quotation.api.Snapshot.prototype.getAskpriceList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 20));
};


/** @param {!Array.<number>} value */
proto.quotation.api.Snapshot.prototype.setAskpriceList = function(value) {
  jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.quotation.api.Snapshot.prototype.addAskprice = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


proto.quotation.api.Snapshot.prototype.clearAskpriceList = function() {
  this.setAskpriceList([]);
};


/**
 * repeated fixed64 askVolume = 21;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.quotation.api.Snapshot.prototype.getAskvolumeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 21));
};


/** @param {!Array.<number>} value */
proto.quotation.api.Snapshot.prototype.setAskvolumeList = function(value) {
  jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.quotation.api.Snapshot.prototype.addAskvolume = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


proto.quotation.api.Snapshot.prototype.clearAskvolumeList = function() {
  this.setAskvolumeList([]);
};


/**
 * optional string timestamp = 22;
 * @return {string}
 */
proto.quotation.api.Snapshot.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.quotation.api.Snapshot.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 22, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotation.api.GetSnapshotResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quotation.api.GetSnapshotResponse.repeatedFields_, null);
};
goog.inherits(proto.quotation.api.GetSnapshotResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotation.api.GetSnapshotResponse.displayName = 'proto.quotation.api.GetSnapshotResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quotation.api.GetSnapshotResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotation.api.GetSnapshotResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quotation.api.GetSnapshotResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotation.api.GetSnapshotResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.quotation.api.GetSnapshotResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    listsnapshotList: jspb.Message.toObjectList(msg.getListsnapshotList(),
    proto.quotation.api.Snapshot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotation.api.GetSnapshotResponse}
 */
proto.quotation.api.GetSnapshotResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotation.api.GetSnapshotResponse;
  return proto.quotation.api.GetSnapshotResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotation.api.GetSnapshotResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotation.api.GetSnapshotResponse}
 */
proto.quotation.api.GetSnapshotResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quotation.api.Snapshot;
      reader.readMessage(value,proto.quotation.api.Snapshot.deserializeBinaryFromReader);
      msg.addListsnapshot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotation.api.GetSnapshotResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotation.api.GetSnapshotResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotation.api.GetSnapshotResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.quotation.api.GetSnapshotResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListsnapshotList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.quotation.api.Snapshot.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Snapshot listSnapshot = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.quotation.api.Snapshot>}
 */
proto.quotation.api.GetSnapshotResponse.prototype.getListsnapshotList = function() {
  return /** @type{!Array.<!proto.quotation.api.Snapshot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quotation.api.Snapshot, 1));
};


/** @param {!Array.<!proto.quotation.api.Snapshot>} value */
proto.quotation.api.GetSnapshotResponse.prototype.setListsnapshotList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.quotation.api.Snapshot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quotation.api.Snapshot}
 */
proto.quotation.api.GetSnapshotResponse.prototype.addListsnapshot = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.quotation.api.Snapshot, opt_index);
};


proto.quotation.api.GetSnapshotResponse.prototype.clearListsnapshotList = function() {
  this.setListsnapshotList([]);
};


