/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.quotation.api.ExchangeInfo');
goog.provide('proto.quotation.api.ListExchangeRequest');
goog.provide('proto.quotation.api.ListExchangeResponse');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.quotation.api.Result');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotation.api.ListExchangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotation.api.ListExchangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotation.api.ListExchangeRequest.displayName = 'proto.quotation.api.ListExchangeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotation.api.ListExchangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quotation.api.ListExchangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotation.api.ListExchangeRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.quotation.api.ListExchangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotation.api.ListExchangeRequest}
 */
proto.quotation.api.ListExchangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotation.api.ListExchangeRequest;
  return proto.quotation.api.ListExchangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotation.api.ListExchangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotation.api.ListExchangeRequest}
 */
proto.quotation.api.ListExchangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotation.api.ListExchangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotation.api.ListExchangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotation.api.ListExchangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.quotation.api.ListExchangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotation.api.ExchangeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quotation.api.ExchangeInfo.repeatedFields_, null);
};
goog.inherits(proto.quotation.api.ExchangeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotation.api.ExchangeInfo.displayName = 'proto.quotation.api.ExchangeInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quotation.api.ExchangeInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotation.api.ExchangeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.quotation.api.ExchangeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotation.api.ExchangeInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.quotation.api.ExchangeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchangeno: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tradingtimeList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotation.api.ExchangeInfo}
 */
proto.quotation.api.ExchangeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotation.api.ExchangeInfo;
  return proto.quotation.api.ExchangeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotation.api.ExchangeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotation.api.ExchangeInfo}
 */
proto.quotation.api.ExchangeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangeno(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTradingtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotation.api.ExchangeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotation.api.ExchangeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotation.api.ExchangeInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.quotation.api.ExchangeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchangeno();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTradingtimeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string exchangeNo = 1;
 * @return {string}
 */
proto.quotation.api.ExchangeInfo.prototype.getExchangeno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.quotation.api.ExchangeInfo.prototype.setExchangeno = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string tradingTime = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.quotation.api.ExchangeInfo.prototype.getTradingtimeList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.quotation.api.ExchangeInfo.prototype.setTradingtimeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.quotation.api.ExchangeInfo.prototype.addTradingtime = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.quotation.api.ExchangeInfo.prototype.clearTradingtimeList = function() {
  this.setTradingtimeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotation.api.ListExchangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quotation.api.ListExchangeResponse.repeatedFields_, null);
};
goog.inherits(proto.quotation.api.ListExchangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotation.api.ListExchangeResponse.displayName = 'proto.quotation.api.ListExchangeResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quotation.api.ListExchangeResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotation.api.ListExchangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quotation.api.ListExchangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotation.api.ListExchangeResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.quotation.api.ListExchangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.quotation.api.Result.toObject(includeInstance, f),
    listexchangeinfoList: jspb.Message.toObjectList(msg.getListexchangeinfoList(),
    proto.quotation.api.ExchangeInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotation.api.ListExchangeResponse}
 */
proto.quotation.api.ListExchangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotation.api.ListExchangeResponse;
  return proto.quotation.api.ListExchangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotation.api.ListExchangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotation.api.ListExchangeResponse}
 */
proto.quotation.api.ListExchangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quotation.api.Result;
      reader.readMessage(value,proto.quotation.api.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 3:
      var value = new proto.quotation.api.ExchangeInfo;
      reader.readMessage(value,proto.quotation.api.ExchangeInfo.deserializeBinaryFromReader);
      msg.addListexchangeinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotation.api.ListExchangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotation.api.ListExchangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotation.api.ListExchangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.quotation.api.ListExchangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.quotation.api.Result.serializeBinaryToWriter
    );
  }
  f = message.getListexchangeinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.quotation.api.ExchangeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Result result = 1;
 * @return {?proto.quotation.api.Result}
 */
proto.quotation.api.ListExchangeResponse.prototype.getResult = function() {
  return /** @type{?proto.quotation.api.Result} */ (
    jspb.Message.getWrapperField(this, proto.quotation.api.Result, 1));
};


/** @param {?proto.quotation.api.Result|undefined} value */
proto.quotation.api.ListExchangeResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.quotation.api.ListExchangeResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.quotation.api.ListExchangeResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ExchangeInfo listExchangeInfo = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.quotation.api.ExchangeInfo>}
 */
proto.quotation.api.ListExchangeResponse.prototype.getListexchangeinfoList = function() {
  return /** @type{!Array.<!proto.quotation.api.ExchangeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quotation.api.ExchangeInfo, 3));
};


/** @param {!Array.<!proto.quotation.api.ExchangeInfo>} value */
proto.quotation.api.ListExchangeResponse.prototype.setListexchangeinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.quotation.api.ExchangeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quotation.api.ExchangeInfo}
 */
proto.quotation.api.ListExchangeResponse.prototype.addListexchangeinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.quotation.api.ExchangeInfo, opt_index);
};


proto.quotation.api.ListExchangeResponse.prototype.clearListexchangeinfoList = function() {
  this.setListexchangeinfoList([]);
};


