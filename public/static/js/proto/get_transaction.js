/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.quotation.api.Direction');
goog.provide('proto.quotation.api.GetTransactionRequest');
goog.provide('proto.quotation.api.GetTransactionResponse');
goog.provide('proto.quotation.api.TransactionDetail');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.quotation.api.Result');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotation.api.GetTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotation.api.GetTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotation.api.GetTransactionRequest.displayName = 'proto.quotation.api.GetTransactionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotation.api.GetTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quotation.api.GetTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotation.api.GetTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.quotation.api.GetTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchangeno: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commodityno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commoditytype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contractno: jspb.Message.getFieldWithDefault(msg, 4, ""),
    count: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotation.api.GetTransactionRequest}
 */
proto.quotation.api.GetTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotation.api.GetTransactionRequest;
  return proto.quotation.api.GetTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotation.api.GetTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotation.api.GetTransactionRequest}
 */
proto.quotation.api.GetTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangeno(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommodityno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommoditytype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractno(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotation.api.GetTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotation.api.GetTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotation.api.GetTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.quotation.api.GetTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchangeno();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommodityno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommoditytype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContractno();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string exchangeNo = 1;
 * @return {string}
 */
proto.quotation.api.GetTransactionRequest.prototype.getExchangeno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.quotation.api.GetTransactionRequest.prototype.setExchangeno = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string commodityNo = 2;
 * @return {string}
 */
proto.quotation.api.GetTransactionRequest.prototype.getCommodityno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.quotation.api.GetTransactionRequest.prototype.setCommodityno = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string commodityType = 3;
 * @return {string}
 */
proto.quotation.api.GetTransactionRequest.prototype.getCommoditytype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.quotation.api.GetTransactionRequest.prototype.setCommoditytype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string contractNo = 4;
 * @return {string}
 */
proto.quotation.api.GetTransactionRequest.prototype.getContractno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.quotation.api.GetTransactionRequest.prototype.setContractno = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 count = 5;
 * @return {number}
 */
proto.quotation.api.GetTransactionRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.quotation.api.GetTransactionRequest.prototype.setCount = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotation.api.TransactionDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quotation.api.TransactionDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotation.api.TransactionDetail.displayName = 'proto.quotation.api.TransactionDetail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotation.api.TransactionDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.quotation.api.TransactionDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotation.api.TransactionDetail} msg The msg instance to transform.
 * @return {!Object}
 */
proto.quotation.api.TransactionDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    volume: jspb.Message.getFieldWithDefault(msg, 2, 0),
    addopeninterest: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotation.api.TransactionDetail}
 */
proto.quotation.api.TransactionDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotation.api.TransactionDetail;
  return proto.quotation.api.TransactionDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotation.api.TransactionDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotation.api.TransactionDetail}
 */
proto.quotation.api.TransactionDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setVolume(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddopeninterest(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!proto.quotation.api.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotation.api.TransactionDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotation.api.TransactionDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotation.api.TransactionDetail} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.quotation.api.TransactionDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getAddopeninterest();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional double price = 1;
 * @return {number}
 */
proto.quotation.api.TransactionDetail.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.quotation.api.TransactionDetail.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional fixed64 volume = 2;
 * @return {number}
 */
proto.quotation.api.TransactionDetail.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.quotation.api.TransactionDetail.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 addOpenInterest = 3;
 * @return {number}
 */
proto.quotation.api.TransactionDetail.prototype.getAddopeninterest = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.quotation.api.TransactionDetail.prototype.setAddopeninterest = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string timestamp = 4;
 * @return {string}
 */
proto.quotation.api.TransactionDetail.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.quotation.api.TransactionDetail.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional Direction direction = 5;
 * @return {!proto.quotation.api.Direction}
 */
proto.quotation.api.TransactionDetail.prototype.getDirection = function() {
  return /** @type {!proto.quotation.api.Direction} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.quotation.api.Direction} value */
proto.quotation.api.TransactionDetail.prototype.setDirection = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quotation.api.GetTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quotation.api.GetTransactionResponse.repeatedFields_, null);
};
goog.inherits(proto.quotation.api.GetTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.quotation.api.GetTransactionResponse.displayName = 'proto.quotation.api.GetTransactionResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quotation.api.GetTransactionResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quotation.api.GetTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quotation.api.GetTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quotation.api.GetTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.quotation.api.GetTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.quotation.api.Result.toObject(includeInstance, f),
    exchangeno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commodityno: jspb.Message.getFieldWithDefault(msg, 3, ""),
    commoditytype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contractno: jspb.Message.getFieldWithDefault(msg, 5, ""),
    listtransactionList: jspb.Message.toObjectList(msg.getListtransactionList(),
    proto.quotation.api.TransactionDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quotation.api.GetTransactionResponse}
 */
proto.quotation.api.GetTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quotation.api.GetTransactionResponse;
  return proto.quotation.api.GetTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quotation.api.GetTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quotation.api.GetTransactionResponse}
 */
proto.quotation.api.GetTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quotation.api.Result;
      reader.readMessage(value,proto.quotation.api.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangeno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommodityno(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommoditytype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractno(value);
      break;
    case 6:
      var value = new proto.quotation.api.TransactionDetail;
      reader.readMessage(value,proto.quotation.api.TransactionDetail.deserializeBinaryFromReader);
      msg.addListtransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quotation.api.GetTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quotation.api.GetTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quotation.api.GetTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.quotation.api.GetTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.quotation.api.Result.serializeBinaryToWriter
    );
  }
  f = message.getExchangeno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommodityno();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCommoditytype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContractno();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getListtransactionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.quotation.api.TransactionDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional Result result = 1;
 * @return {?proto.quotation.api.Result}
 */
proto.quotation.api.GetTransactionResponse.prototype.getResult = function() {
  return /** @type{?proto.quotation.api.Result} */ (
    jspb.Message.getWrapperField(this, proto.quotation.api.Result, 1));
};


/** @param {?proto.quotation.api.Result|undefined} value */
proto.quotation.api.GetTransactionResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.quotation.api.GetTransactionResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.quotation.api.GetTransactionResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string exchangeNo = 2;
 * @return {string}
 */
proto.quotation.api.GetTransactionResponse.prototype.getExchangeno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.quotation.api.GetTransactionResponse.prototype.setExchangeno = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string commodityNo = 3;
 * @return {string}
 */
proto.quotation.api.GetTransactionResponse.prototype.getCommodityno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.quotation.api.GetTransactionResponse.prototype.setCommodityno = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string commodityType = 4;
 * @return {string}
 */
proto.quotation.api.GetTransactionResponse.prototype.getCommoditytype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.quotation.api.GetTransactionResponse.prototype.setCommoditytype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string contractNo = 5;
 * @return {string}
 */
proto.quotation.api.GetTransactionResponse.prototype.getContractno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.quotation.api.GetTransactionResponse.prototype.setContractno = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated TransactionDetail listTransaction = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.quotation.api.TransactionDetail>}
 */
proto.quotation.api.GetTransactionResponse.prototype.getListtransactionList = function() {
  return /** @type{!Array.<!proto.quotation.api.TransactionDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quotation.api.TransactionDetail, 6));
};


/** @param {!Array.<!proto.quotation.api.TransactionDetail>} value */
proto.quotation.api.GetTransactionResponse.prototype.setListtransactionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.quotation.api.TransactionDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quotation.api.TransactionDetail}
 */
proto.quotation.api.GetTransactionResponse.prototype.addListtransaction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.quotation.api.TransactionDetail, opt_index);
};


proto.quotation.api.GetTransactionResponse.prototype.clearListtransactionList = function() {
  this.setListtransactionList([]);
};


/**
 * @enum {number}
 */
proto.quotation.api.Direction = {
  KFLAT: 0,
  KSHORT: 1,
  KLONG: 2
};

